name: amlarc-training-test
on:
  schedule:
    - cron: "0 23 * * *"
  workflow_dispatch:
    inputs:
      LOCATION:
        description: 'Resource Region'
        required: false
        default: 'eastus'
      AMLARC_RELEASE_TRAIN:
        description: 'Release version: experimental, staging or stable'
        required: false
        default: 'staging'
      CLEANUP_CLUSTER:
        description: 'Whether to delete cluster: true or false'
        required: false
        default: 'false'
jobs:
  training:
    runs-on: ubuntu-latest
    env:
      SUBSCRIPTION: ${{ secrets.SUBSCRIPTION }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
      LOCATION: ${{ github.event.inputs.LOCATION }}
      RELEASE_TRAIN: ${{ github.event.inputs.AMLARC_RELEASE_TRAIN }}

      OWNERS: zetia@microsoft.com;jing.zhong@microsoft.com
      GITHUB_REPO: https://github.com/Azure/AML-Kubernetes
      WORKFLOW_URL: https://github.com/Azure/AML-Kubernetes/actions/workflows/amlarc-training.yml
      
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: install tools
      run: bash .github/amlarc-tool.sh install_tools
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AMLARC_SP_CREDS}}
      
    # provision resources
    - name: setup_aks
      run: bash .github/amlarc-tool.sh setup_aks
    - name: connect_arc
      run: bash .github/amlarc-tool.sh connect_arc
    - name: install_extension
      run: |
        export EXTENSION_SETTINGS="enableTraining=True enableInference=True allowInsecureConnections=True"
        bash .github/amlarc-tool.sh install_extension
    - name: setup_workspace
      run: bash .github/amlarc-tool.sh setup_workspace
    - name: setup_compute
      run: bash .github/amlarc-tool.sh setup_compute
    - name: setup_instance_type
      run: bash .github/amlarc-tool.sh setup_instance_type
    
    # run training test cases
    - name: run examples/training/simple-train-cli/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job examples/training/simple-train-cli/job.yml
      continue-on-error: true
    - name: prepare jupyter dependency
      run: |
        bash .github/amlarc-tool.sh generate_workspace_config
        bash .github/amlarc-tool.sh install_jupyter_dependency
      continue-on-error: true
    - name: run examples/training/simple-train-sdk/img-classification-training.ipynb
      run: |
        export AMLARC_COMPUTE_NAME=githubtest
        bash .github/amlarc-tool.sh run_jupyter_test examples/training/simple-train-sdk/img-classification-training.ipynb
      continue-on-error: true

    # run inference test cases
    - name: run examples/inference/simple-flow/endpoint.yml
      run: |
        set +e
        source .github/amlarc-tool.sh
        WS_DIR=examples/inference/simple-flow/
        SUB_RG_WS=" --subscription ${SUBSCRIPTION} --resource-group ${RESOURCE_GROUP} --workspace-name ${WORKSPACE} "
        az ml online-endpoint create $SUB_RG_WS --name sklearn-mnist -f $WS_DIR/endpoint.yml --set compute=azureml:$COMPUTE
        az ml online-deployment create $SUB_RG_WS --name blue --endpoint sklearn-mnist -f $WS_DIR/blue-deployment.yml --all-traffic
        az ml online-endpoint invoke $SUB_RG_WS -n sklearn-mnist -r $WS_DIR/sample-request.json
        if [ "$?" == "0" ] ; then
            echo "Job $WS_DIR/endpoint.yml completed" | tee -a $RESULT_FILE
        else
            echo "Job $WS_DIR/endpoint.yml failed" | tee -a $RESULT_FILE
        fi
      continue-on-error: true
      
    # check result
    - name: count_result
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result
    - name: file_icm
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result || ret=$?
        if [ "$ret" != "0" ] && [ "$ret" != "" ] ; then
            # download certificates
            bash .github/amlarc-tool.sh download_icm_cert
            export ICM_HOST=$(cat icm_host)
            export SUMMARY=$(bash .github/amlarc-tool.sh gen_summary_for_github_test)
            bash .github/amlarc-tool.sh file_icm
        fi

    - name: clean up resources
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh delete_endpoints
        bash .github/amlarc-tool.sh delete_extension
        if [ "${{ github.event.inputs.CLEANUP_CLUSTER }}" == "true" ] ; then
            bash .github/amlarc-tool.sh delete_arc
            bash .github/amlarc-tool.sh delete_aks
        fi



