name: kubernetes-compute-simple-examples
on:
  schedule:
    - cron: "0 23 * * *"
  workflow_dispatch:
    inputs:
      LOCATION:
        description: 'Resource Region'
        required: false
        default: 'eastus'
      AMLARC_RELEASE_TRAIN:
        description: 'Release version: experimental, staging or stable'
        required: false
        default: 'staging'
      REINSTALL_EXTENSION:
        description: 'Whether to reinstall extension: true or false'
        required: false
        default: 'true'
      CLEANUP_CLUSTER:
        description: 'Whether to delete cluster: true or false'
        required: false
        default: 'false'
      CLEANUP_WORKSPACE:
        description: 'Whether to delete workspace: true or false'
        required: false
        default: 'false'
      FILE_TICKET:
        description: 'Whether to file icm ticket: true or false'
        required: false
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUBSCRIPTION: ${{ secrets.SUBSCRIPTION }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
      LOCATION: eastus
      RELEASE_TRAIN: staging
      REINSTALL_EXTENSION: true

      MIN_SUCCESS_NUM: 3
      SEVERITY: 3
      OWNERS: amlarc@microsoft.com
      TITLE: "[Github Workflow] kubernetes-compute-simple-examples failed"
      GITHUB_REPO: https://github.com/Azure/AML-Kubernetes
      WORKFLOW_URL: https://github.com/Azure/AML-Kubernetes/actions/workflows/kubernetes-compute-simple-examples.yml
      TSG_ID: https://microsoft.sharepoint.com/teams/Vienna/_layouts/15/Doc.aspx?sourcedoc=%7B7ebf9ccd-fa20-4e82-8b2b-6c14c9f1740f%7D&action=edit&wd=target(AMLArcTSG.one%7C69e8bdb1-5734-4b07-967a-5a50a91cf040%2FTroubleshooting%20github%20workflow%7C53a1a232-f9f0-4192-b7d2-0474848ebb18%2F)&share=IgHNnL9-IPqCTosrbBTJ8XQPAVwbVLD_kFe92G2Y9a49ROs
      ICM_MESSAGE: "Failed to run simple-examples on kubernetes compute!"

    steps:
    - name: replace env from workflow_dispatch
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "LOCATION=${{ github.event.inputs.TEST_REGION }}" | tee -a $GITHUB_ENV
        echo "RELEASE_TRAIN=${{ github.event.inputs.AMLARC_RELEASE_TRAIN }}" | tee -a $GITHUB_ENV
        echo "REINSTALL_EXTENSION=${{ github.event.inputs.REINSTALL_EXTENSION }}" | tee -a $GITHUB_ENV
    - name: check out repo
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: upgrade cli to 2.38
      run: |
        sudo apt-get update
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg

        curl -sL https://packages.microsoft.com/keys/microsoft.asc |
            gpg --dearmor |
            sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null

        AZ_REPO=`lsb_release -cs`
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
            sudo tee /etc/apt/sources.list.d/azure-cli.list

        sudo apt-get update
        apt-cache policy azure-cli
        sudo apt-get install azure-cli=2.38.0-1~$AZ_REPO  -y

        az version

    - name: install tools
      run: |
        set -x
        python --version
        pip --version
        az version 
        az ml -h || true
        az upgrade --all --yes || true
        az extension add -n connectedk8s --yes  || true
        az extension add -n k8s-extension --yes || true
        az extension add -n ml --yes || true
        az version
        az ml -h
      timeout-minutes: 30
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AMLARC_SP_CREDS}}
      timeout-minutes: 30
    # provision resources
    # - name: setup_aks
    #   run: bash .github/amlarc-tool.sh setup_aks
    #   timeout-minutes: 30
    # - name: connect_arc
    #   run: bash .github/amlarc-tool.sh connect_arc
    #   timeout-minutes: 30
    # - name: install_extension
    #   run: |
    #     export EXTENSION_SETTINGS="enableTraining=True enableInference=True inferenceRouterServiceType=loadBalancer allowInsecureConnections=True"
    #     bash .github/amlarc-tool.sh install_extension
    #   timeout-minutes: 30
    - name: setup_workspace
      run: bash .github/amlarc-tool.sh setup_workspace
      timeout-minutes: 30
    - name: setup_compute
      run: bash .github/amlarc-tool.sh setup_compute
      timeout-minutes: 30
    - name: setup_instance_type
      run: bash .github/amlarc-tool.sh setup_instance_type
      timeout-minutes: 30
    
    # run training test cases
    # - name: run examples/training/simple-train-cli/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job examples/training/simple-train-cli/job.yml
    #   continue-on-error: true
    #   timeout-minutes: 30
    # - name: prepare jupyter dependency
    #   run: |
    #     bash .github/amlarc-tool.sh generate_workspace_config
    #     bash .github/amlarc-tool.sh install_jupyter_dependency
    #   continue-on-error: true
    #   timeout-minutes: 30
    # - name: run examples/training/simple-train-sdk/img-classification-training.ipynb
    #   run: |
    #     export AMLARC_COMPUTE_NAME=githubtest
    #     bash .github/amlarc-tool.sh run_jupyter_test examples/training/simple-train-sdk/img-classification-training.ipynb
    #   continue-on-error: true
    #   timeout-minutes: 30

    # run inference test cases
    - name: run examples/inference/simple-flow/endpoint.yml
      run: |
        set +e
        source .github/amlarc-tool.sh
        WS_DIR=examples/inference/simple-flow/
        SUB_RG_WS=" --subscription ${SUBSCRIPTION} --resource-group ${RESOURCE_GROUP} --workspace-name ${WORKSPACE} "
        
        echo "[JobSubmission] $WS_DIR/endpoint.yml" | tee -a $RESULT_FILE

        # create endpoint and deployment
        az ml online-endpoint create $SUB_RG_WS --name sklearn-mnist -f $WS_DIR/endpoint.yml --set compute=azureml:$COMPUTE --debug
        sleep 60
        az ml online-deployment create $SUB_RG_WS --name blue --endpoint sklearn-mnist -f $WS_DIR/blue-deployment.yml --all-traffic --debug
        # scoring
        sleep 60
        primaryKey=$(az ml online-endpoint get-credentials $SUB_RG_WS --name sklearn-mnist -o tsv --query "primaryKey" )
        scoring_uri=$(az ml online-endpoint show $SUB_RG_WS --name sklearn-mnist  -o tsv  --query "scoring_uri" )
        sample_data=$(cat $WS_DIR/sample-request.json)
        res=$(kubectl exec -n azureml deploy/azureml-fe-v2 -- curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $primaryKey" -s --connect-timeout 5 "$scoring_uri" -d "$sample_data")
        
        echo "$res"
        if [ "$res" == "[8]" ] ; then
            echo "[JobStatus] $WS_DIR/endpoint.yml completed" | tee -a $RESULT_FILE
        else
            echo "[JobStatus] $WS_DIR/endpoint.yml failed" | tee -a $RESULT_FILE
        fi
      continue-on-error: true
      timeout-minutes: 30
      
    # check result
    - name: count_result
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result
      timeout-minutes: 30
    - name: file_icm
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result || ret=$?
        if [ "$ret" != "0" ] && [ "$ret" != "" ] && [ "${{ github.event.inputs.FILE_TICKET }}" != "false" ] ; then
            # download certificates
            export ICM_HOST_NAME=ICM-HOST-PROD
            export ICM_CONNECTOR_ID_NAME=ICM-CONNECTOR-ID-PROD
            export ICM_ROUTING_ID_NAME=ICM-ROUTING-ID-PROD 
            bash .github/amlarc-tool.sh download_icm_cert
            export ICM_HOST=$(cat icm_host)
            export CONNECTOR_ID=$(cat icm_connector_id)
            export ROUTING_ID=$(cat icm_routing_id)
            export SUMMARY=$(bash .github/amlarc-tool.sh gen_summary_for_github_test)
            bash .github/amlarc-tool.sh file_icm
        fi
      timeout-minutes: 30




