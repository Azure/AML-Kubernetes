To use CMAKS compute target, we will install AML add-on to your AKS cluster.This process is automaically when you first attach AKS cluster to AML workspace.

The AML add-on is backend services running on customer managed cluster which bring AKS cluster to AML to handle ML workload. It includes following functions:
1.	provide security bi-direction communication channel to get training jobs from AML, and also will submit artifacts of the training jobs, such as the models, metrics and snapshot of the training jobs.
2.	ML frame operator to handle the real ML training workload, such as tf-operator, Pytorch operator and MPI operator.
3.	Job converter, convert AML job spec to underline operator spec
4.	Metrics reporter, we will collect some perf counter of run level and compute level and store the metrics to AML workspace.


The detail components of AML add-onï¼š

|  Name   | Description  |Namespace  |Version  |Creator  |
|  ----   | -----------  | --------- | ------  | ------  |
|AML-Addon-Gateway		|Receive requests from ES, Https support, JWT verification, NSG				|azureml	|V0.1		|AML K8s|
|AML-REST-Server 		|Used to handle requests from AML. Also generate AuzreMLJob and submit to kubernetes	|azureml	|V0.1		|AML K8s|
|AML-Operator 			|Used to handle AzureMLJobs, creating related resources and submit to kubernetes	|azureml	|V0.1		|AML K8s|
|Job-exporter			|Collect job level metrics								|azureml	|V0.1		|AML K8s|
|Compute-exporter		|Collect compute level metrics								|azureml	|V0.1		|AML K8s|
|metrics-reporter 		|Upload metrics to Application Insights(May change to runhistory when ready)		|azureml	|V0.1		|AML K8s|
|Azureml-setup container	|Container in job pods to setup AML job run environment					|azureml	|V0.1		|AML K8s|
|Sidecar container		|Container in job pods to upload job logs/metrics to Run History			|azureml	|V0.1		|AML K8s|
|tf-operator			|Used to run and manage distributed tensorflow jobs					|Kubeflow	|v1.0		|Kubeflow|
|pytorch-operator		|Used to run and manage distributed pytorch jobs					|Kubeflow	|v1.0		|Kubeflow|
|mpi-operator			|Used to run and manage distributed mpi jobs						|mpi-operator	|v1alpha2	|Kubeflow|
|Volcano-scheduler		|Used to enable gang-scheduling								|volcano-system	|v0.3		|Volcano|
|Prometheus-op			|Create and maintain prometheus instance						|default	|v0.38.1	|CoreOs|
|k8s-device-plugin		|Expose GPU resource in nodes								|gpu-resources	|v1.0.0-beta	|Nvidia|
|kubernetes-volume-drivers	|blobfuse FlexVolume driver for Kubernetes						|default	|sha256:d550ef47c21	|Azure| 
|fuse-device-plugin		|Support fuse inside container (use dataset/datastore as mount in container)		|default	|		|--

By default, the AML add-on will automatically install when you attach one AKS cluster first time. In the private preview, we only support upgrade / uninstall manually. 

## Install/upgrade/uninstall manaully
### Prerequisite
to install AML operator, you need:
1. you need get the kubeconf from AKS CLI
2. you need use the AKS cluster as kubeclt current context

### Install/Upgrade(linux)
we provide a shell script to support one step installation. It is valiated in linux.
1. download [tools package](https://github.com/Azure/AML-Kubernetes/raw/master/files/tools.zip).
2. extract tools script
```
tar xvf tools.tar
```
3. go to the installer script document
```
cd installer
```
4. To update or install components in your cluster.
	- Change the content in installer/install-job-chart/values.yaml, replace sub, resource etc with actual values.
	- Run the following command, replace the ```${agent-installer-image}``` with the installer's latest image.
    ```bash install.sh ${agent-installer-image} azureml```


installer image: the install image, the newest image is: `mcr.microsoft.com/azureml/cmk8s/agent-setup:default-queue-0806-new`

compute target resource id: the resource id of this compute in Azure. It is structure is: `AML workspace resource id`/computes/`compute name`, due to in this time the compute target is not created yet, you need align to use the same compute target name in  [attach CMAKS compute](https://github.com/Azure/CMK8s-Samples/blob/master/docs/2.%20Attach%20CMAKS%20compute.markdown)

You can find the AML workspace resource id from ```AML workspace > settings > properties```.

![workspace resoure id](/pics/2.1workspaceresourceid.png)

![workspace resoure id](/pics/2.2workspaceresourceid.png)

node pool: the AKS node pool in this AKS cluster used to attach the compute target.

appinsight InstrumentationKey: the Connection String of this appinsight, you can find this from AML work space application insights.

![application insights](/pics/2.3applicationinsights.png)

![connection string](/pics/2.4connectionstring.png)

### Verify AML add-on installation

You have several methods to validate the AML agent installation

if the `cmaks-init-job` is compeled, the AML agent installation is finished.

1. view init job status via kubectl

```
kubectl get job
```

2. view controller status in UI

![cmaks-init-job](/pics/2.5innijobui.png)


### Uninstall AML add-on mannually(linux)

Use the AKS cluster as kubeclt current context.

Follow the steps 1-2 in the install process and go to the uninstaller script document.

To delete all the components installed by the agents, run the following command, replace the cluster name with your cluster name.

```bash ./uninstall.sh ${cluster_name} azureml```

## Enable metrics monitoring

CMAKS use application insights of AML worksapce to show the metrics of compute level and run level. To enable this function, you need enable custom metrics in ```appinsights>config>usage & estimated cost> custom metrics```.

![custom metrics](/pics/2.6custommetrics.png)

![ennable custom metrics](/pics/2.7ennablecustommetrics.png)


After AML agnet is sucessful installed, you can [attach CMAKS compute](https://github.com/Azure/CMK8s-Samples/blob/master/docs/2.%20Attach%20CMAKS%20compute.markdown)

## Useful commands

### Azure CLI

#### list cloud

```
az cloud list --output table
```

#### change cloud

```
az cloud set -n AzureCloud
```

#### list subs
```
az account list --output table
```
#### change sub
```
az account set -s <sub>
```
### AKS CLI
#### get kubeconfig
```
az aks get-credentials --resource-group <resource-group> --name <cluster-name>
```
### kubeclt
#### list kube config context
```
kubectl config get-contexts
```
#### change kube config context
```
kubectl config use-context <context>
```
